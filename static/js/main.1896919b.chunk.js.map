{"version":3,"sources":["Table/index.js","App.js","reportWebVitals.js","index.js"],"names":["Table","useState","gridApi","setGridApi","setGridColumnApi","rowData","rowSelectionType","style","padding","onClick","applyTransaction","add","selectedRows","getSelectedRows","remove","className","height","width","onGridReady","params","api","columnApi","rowSelection","sideBar","field","sortable","editable","filter","enableValue","enableRowGroup","checkboxSelection","required","cellRenderer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAKe,SAASA,IACpB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACF,EAA0CF,mBAAS,MAAnD,mBAAsBG,GAAtB,WACA,EAA8BH,mBAAS,MAAvC,mBAAOI,EAAP,KAgCOC,GAhCP,KAgCwB,YAGxB,OACI,gCACA,sBAAKC,MAAO,CAACC,QAAQ,QAArB,UACA,wBAAQC,QAAS,kBAAIP,EAAQQ,iBAAiB,CAACC,IAAI,CAAC,OAApD,qBACA,wBAAQF,QAAS,WAAM,IAAMG,EAAaV,EAAQW,kBAClDX,EAAQQ,iBAAiB,CAACI,OAAQF,KADlC,iCAGA,+CAMK,sBAAKG,UAAU,kBAAkBR,MAAO,CAACS,OAAQ,IAAKC,MAAM,QAA5D,UACA,eAAC,cAAD,CAEKZ,QAASA,EAAWa,YAjDd,SAACC,GACnBhB,EAAWgB,EAAOC,KAClBhB,EAAiBe,EAAOE,YA+CkCC,aAAchB,EAAmBiB,SAAS,EAF7F,UAGI,cAAC,eAAD,CAAcC,MAAM,KAAKC,UAAW,EAAOC,UAAU,EAAOC,QAAS,EAASC,aAAa,EAAOC,gBAAgB,EAAOC,mBAAoB,IAC7I,cAAC,eAAD,CAAcN,MAAM,OAAOC,UAAW,EAAOC,UAAU,EAAOC,QAAS,IACvE,cAAC,eAAD,CAAcH,MAAM,QAAQC,UAAW,EAAOC,UAAU,EAAOC,QAAS,EAAOI,UAAQ,IACvF,cAAC,eAAD,CAAcP,MAAM,SAASQ,aAAa,aAAaP,UAAW,EAAOC,UAAU,EAAOC,QAAS,IACnG,cAAC,eAAD,CAAcH,MAAM,MAAMC,UAAW,EAAOC,UAAU,EAAOC,QAAS,IACtE,cAAC,eAAD,CAAcH,MAAM,UAAUC,UAAW,EAAOE,QAAS,EAAOD,UAAU,IAC1E,cAAC,eAAD,CAAcF,MAAM,OAAOC,UAAW,EAAOC,UAAU,EAAOC,QAAS,OAE3E,sBAAKZ,UAAU,kBAAkBR,MAAO,CAACS,OAAQ,IAAKC,MAAM,QAA5D,UACA,gDACA,eAAC,cAAD,CAAcZ,QAASA,EAAWiB,aAAchB,EAAmBiB,SAAS,EAA5E,UAEC,cAAC,eAAD,CAAcC,MAAM,KAAKC,UAAW,EAAOC,UAAU,EAAOC,QAAS,EAASC,aAAa,EAC3FC,gBAAgB,EAAQC,mBAAoB,IACzC,cAAC,eAAD,CAAcN,MAAM,OAAOC,UAAW,EAAOC,UAAU,EAAQC,QAAS,IACxE,cAAC,eAAD,CAAcH,MAAM,QAAQC,UAAW,EAAOC,UAAU,EAAQC,QAAS,IACzE,cAAC,eAAD,CAAcH,MAAM,SAASC,UAAW,EAAOC,UAAU,EAAQC,QAAS,IAC1E,cAAC,eAAD,CAAcH,MAAM,MAAMC,UAAW,EAAOC,UAAU,EAAQC,QAAS,IACvE,cAAC,eAAD,CAAcH,MAAM,UAAUC,UAAW,EAAOE,QAAS,EAAQD,UAAU,IAC3E,cAAC,eAAD,CAAcF,MAAM,OAAOC,UAAW,EAAOC,UAAU,EAAQC,QAAS,gBCpExEM,MARf,WACE,OACE,qBAAKlB,UAAU,MAAf,SACE,cAACf,EAAD,OCMSkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1896919b.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport {AgGridColumn,AgGridReact} from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\n\r\nexport default function Table(){\r\n    const [gridApi, setGridApi] = useState([]);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const [rowData, setRowData] = useState(null);\r\n\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    const updateData = (data) => {\r\n      setRowData(data);\r\n    };\r\n  }\r\n  const GenderCell=(props)=>{\r\n      const {value}=props;\r\n      const icon=value=='Male';// ? <genderCell/>:<genderCell/>;\r\n      return(\r\n          <div>{icon}{value}\r\n          </div>\r\n      )\r\n  }\r\n    \r\n  const handleChange = ({target}) => {\r\n    setRowData(target.value);\r\n  }\r\n  const addData = (e) => {\r\n    e.preventDefault();\r\n    console.log(rowData);\r\n    if(rowData != null){\r\n      const mygridApi = gridApi;\r\n      mygridApi.push(rowData);\r\n      setGridApi(mygridApi);\r\n    }   \r\n  }\r\n\r\n   \r\n   const rowSelectionType='multiple';\r\n  \r\n  \r\n  return(\r\n      <div>\r\n      <div style={{padding:\"10px\"}}>\r\n      <button onClick={()=>gridApi.applyTransaction({add:[{}]})} >Add Row</button>\r\n      <button onClick={()=>{ const selectedRows=gridApi.getSelectedRows()\r\n      gridApi.applyTransaction({remove: selectedRows})}}>Delete Selected Row</button>\r\n      \r\n      <button>Submit</button>\r\n\r\n      </div>\r\n\r\n\r\n   \r\n           <div className=\"ag-theme-alpine\" style={{height: 300, width:\"100%\"}}>\r\n           <AgGridReact\r\n   \r\n                rowData={rowData}   onGridReady={onGridReady} rowSelection={rowSelectionType}  sideBar={true}>\r\n               <AgGridColumn field=\"id\" sortable={ true } editable={false} filter={ true }   enableValue={true}  enableRowGroup={true}  checkboxSelection={ true }></AgGridColumn>\r\n               <AgGridColumn field=\"Name\" sortable={ true } editable={true}  filter={ true } ></AgGridColumn>\r\n               <AgGridColumn field=\"Email\" sortable={ true } editable={true}  filter={ true } required ></AgGridColumn>  \r\n               <AgGridColumn field=\"Gender\" cellRenderer='GenderCell' sortable={ true } editable={true}  filter={ true } ></AgGridColumn>\r\n               <AgGridColumn field=\"DOB\" sortable={ true } editable={true}  filter={ true } ></AgGridColumn>\r\n               <AgGridColumn field=\"Country\" sortable={ true } filter={ true } editable={true} ></AgGridColumn>\r\n               <AgGridColumn field=\"City\" sortable={ true } editable={true}  filter={ true } ></AgGridColumn>\r\n           </AgGridReact>\r\n           <div className=\"ag-theme-alpine\" style={{height: 200, width:\"100%\"}}> \r\n           <h2>Submitted Data</h2>\r\n           <AgGridReact  rowData={rowData}   rowSelection={rowSelectionType}  sideBar={true}>\r\n             \r\n            <AgGridColumn field=\"id\" sortable={ true } editable={false} filter={ true }   enableValue={true}\r\n            enableRowGroup={true}   checkboxSelection={ true }  ></AgGridColumn>\r\n               <AgGridColumn field=\"Name\" sortable={ true } editable={false}  filter={ true } ></AgGridColumn>\r\n               <AgGridColumn field=\"Email\" sortable={ true } editable={false}  filter={ true } ></AgGridColumn>\r\n               <AgGridColumn field=\"Gender\" sortable={ true } editable={false}  filter={ true } ></AgGridColumn>\r\n               <AgGridColumn field=\"DOB\" sortable={ true } editable={false}  filter={ true } ></AgGridColumn>\r\n               <AgGridColumn field=\"Country\" sortable={ true } filter={ false } editable={true} ></AgGridColumn>\r\n               <AgGridColumn field=\"City\" sortable={ true } editable={false}  filter={ true } ></AgGridColumn>\r\n           </AgGridReact>\r\n           </div>\r\n       </div>\r\n       </div>\r\n\r\n\r\n  )\r\n}","\nimport Table from \"./Table/index\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}